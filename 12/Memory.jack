// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int RAM;
    static int freelist;

    /** Initializes the class. */
    function void init() {
        let freelist = 2048;
        let freelist[0] = 14336;
        let freelist[1] = 0;
        let RAM = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int curBlock, prevBlock, newSize;
        let curBlock = freelist;
        let prevBlock = 0;
        while (~(curBlock = 0)) {
            if (curBlock[0] > size) {
                if (curBlock[0] = (size+1)) {
                    if (prevBlock = 0) {
                        let freelist = curBlock[1];
                    } else {
                        let prevBlock = curBlock[1];
                    }
                    return curBlock + 1;
                }
                let newSize = curBlock[0] - size - 1;
                let curBlock[0] = newSize;
                let curBlock[newSize] = size + 1;
                return curBlock + newSize + 1;
            }
            let prevBlock = curBlock;
            let curBlock = curBlock[1];
        }
        do Sys.error(6);
        return freelist;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freelist;
        let freelist = o - 1;
        return;
    }    
}
