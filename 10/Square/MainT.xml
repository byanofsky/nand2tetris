<tokens>
	<keyword>class</keyword>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<keyword>static</keyword>
	<keyword>boolean</keyword>
	<identifier>test</identifier>
	<symbol>;</symbol>
	<symbol>/</symbol>
	<symbol>/</symbol>
	<identifier>Added</identifier>
	<identifier>for</identifier>
	<identifier>testing</identifier>
	<symbol>-</symbol>
	<symbol>-</symbol>
	<identifier>there</identifier>
	<identifier>is</identifier>
	<identifier>no</identifier>
	<keyword>static</keyword>
	<identifier>keyword</identifier>
	<symbol>/</symbol>
	<symbol>/</symbol>
	<identifier>in</identifier>
	<identifier>the</identifier>
	<identifier>Square</identifier>
	<identifier>files</identifier>
	<symbol>.</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>main</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>SquareGame</identifier>
	<identifier>game</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>game</identifier>
	<symbol>=</symbol>
	<identifier>SquareGame</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>game</identifier>
	<symbol>.</symbol>
	<identifier>run</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>game</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>test</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<symbol>/</symbol>
	<symbol>/</symbol>
	<identifier>Added</identifier>
	<identifier>to</identifier>
	<identifier>test</identifier>
	<identifier>Jack</identifier>
	<identifier>syntax</identifier>
	<identifier>that</identifier>
	<identifier>is</identifier>
	<identifier>not</identifier>
	<identifier>use</identifier>
	<identifier>in</identifier>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>i</identifier>
	<symbol>,</symbol>
	<identifier>j</identifier>
	<symbol>;</symbol>
	<symbol>/</symbol>
	<symbol>/</symbol>
	<identifier>the</identifier>
	<identifier>Square</identifier>
	<identifier>files</identifier>
	<symbol>.</symbol>
	<keyword>var</keyword>
	<identifier>String</identifier>
	<identifier>s</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>a</identifier>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<keyword>false</keyword>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>s</identifier>
	<symbol>=</symbol>
	<stringConstant>string constant</stringConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>s</identifier>
	<symbol>=</symbol>
	<keyword>null</keyword>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>a</identifier>
	<symbol>[</symbol>
	<integerConstant>2</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<symbol>/</symbol>
	<symbol>/</symbol>
	<identifier>There</identifier>
	<identifier>is</identifier>
	<identifier>no</identifier>
	<keyword>else</keyword>
	<identifier>keyword</identifier>
	<identifier>in</identifier>
	<identifier>the</identifier>
	<identifier>Square</identifier>
	<identifier>files</identifier>
	<symbol>.</symbol>
	<keyword>let</keyword>
	<identifier>i</identifier>
	<symbol>=</symbol>
	<identifier>i</identifier>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<symbol>-</symbol>
	<identifier>j</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>j</identifier>
	<symbol>=</symbol>
	<identifier>j</identifier>
	<symbol>/</symbol>
	<symbol>(</symbol>
	<symbol>-</symbol>
	<integerConstant>2</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>/</symbol>
	<symbol>/</symbol>
	<identifier>note</identifier>
	<identifier>unary</identifier>
	<identifier>negate</identifier>
	<identifier>constant</identifier>
	<integerConstant>2</integerConstant>
	<keyword>let</keyword>
	<identifier>i</identifier>
	<symbol>=</symbol>
	<identifier>i</identifier>
	<symbol>|</symbol>
	<identifier>j</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
</tokens>
