function Piece.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push constant 0
pop this 3
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
call Array.new 1
pop this 2
push pointer 0
call Piece.show 1
pop temp 0
push pointer 0
return
function Piece.setPit 0
push argument 0
pop pointer 0
push argument 1
pop this 4
push constant 0
return
function Piece.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push local 0
push this 2
add
pop pointer 1
push that 0
pop local 1
push local 1
call Square.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 2
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Piece.add 0
push argument 0
pop pointer 0
push this 3
push this 2
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 3
push constant 1
add
pop this 3
push constant 0
return
function Piece.length 0
push argument 0
pop pointer 0
push this 3
return
function Piece.getSquarePosX 1
push argument 0
pop pointer 0
push argument 1
push this 2
add
pop pointer 1
push that 0
pop local 0
push local 0
call Square.getX 1
push this 0
add
return
function Piece.getSquarePosY 1
push argument 0
pop pointer 0
push argument 1
push this 2
add
pop pointer 1
push that 0
pop local 0
push local 0
call Square.getY 1
push this 1
add
return
function Piece.next 0
push argument 0
pop pointer 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
call Piece.hide 1
pop temp 0
push argument 1
push constant 4
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
call Piece.rotate 1
pop temp 0
goto IF_END1
label IF_FALSE1
push pointer 0
push argument 1
call Piece.move 2
pop temp 0
label IF_END1
push pointer 0
call Piece.show 1
pop temp 0
push constant 0
return
function Piece.move 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
call Piece.canMove 2
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
push constant 1
sub
pop this 0
label IF_FALSE1
push argument 1
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 0
push constant 1
add
pop this 0
label IF_FALSE2
push argument 1
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 1
push constant 1
add
pop this 1
label IF_FALSE3
push constant 0
return
function Piece.rotate 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Piece.rotateSquare 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Piece.rotateSquare 1
push argument 0
pop pointer 0
push argument 1
push this 2
add
pop pointer 1
push that 0
pop local 0
push local 0
call Square.rotate 1
pop temp 0
push constant 0
return
function Piece.canMove 3
push argument 0
pop pointer 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 2
call Piece.getSquarePosX 2
pop local 0
push pointer 0
push local 2
call Piece.getSquarePosY 2
pop local 1
push argument 1
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push this 4
push local 0
push constant 1
sub
push local 1
call Pit.isAt 3
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
label IF_FALSE0
push argument 1
push constant 2
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
push constant 14
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
push this 4
push local 0
push constant 1
add
push local 1
call Pit.isAt 3
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
label IF_FALSE3
push argument 1
push constant 3
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push pointer 0
push local 2
call Piece.getSquarePosY 2
pop local 1
push local 1
push constant 14
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
return
label IF_FALSE7
push this 4
push local 0
push local 1
push constant 1
add
call Pit.isAt 3
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 0
return
label IF_FALSE8
label IF_FALSE6
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Piece.show 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call Piece.draw 1
pop temp 0
push constant 0
return
function Piece.hide 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Piece.draw 1
pop temp 0
push constant 0
return
function Piece.draw 4
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 3
lt
not
if-goto WHILE_END0
push local 1
push this 2
add
pop pointer 1
push that 0
pop local 0
push this 0
push local 0
call Square.getX 1
add
push constant 16
call Math.multiply 2
pop local 2
push this 1
push local 0
call Square.getY 1
add
push constant 16
call Math.multiply 2
pop local 3
push local 2
push local 3
push local 2
push constant 15
add
push local 3
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Piece.atBottom 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Piece.getSquarePosY 2
push constant 15
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Piece.isCollide 1
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push argument 1
push pointer 0
push local 0
call Piece.getSquarePosX 2
push pointer 0
push local 0
call Piece.getSquarePosY 2
push constant 1
add
call Pit.isAt 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
