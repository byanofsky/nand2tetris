class PacMan {
  field int x, y, size;
  /** ( 1="up" | 2="down" | 3="left" | 4="right" ) */
  field int dir;
  field Walls walls;
  field Dots dots;
  field int speed;

  constructor PacMan new(Dots d, Walls w) {
    let x = 4;
    let y = 16;
    let size = 15;
    let dir = 4;
    let walls = w;
    let dots = d;
    let speed = 1;
    return this;
  }

  method void init() {
    do draw();
    return;
  }

  method void next() {
    var boolean didMove;
    let didMove = advance();
    if (didMove) {
      do draw();
      do captureDots();
    }
    return;
  }

  method boolean advance() {
    var int nextX, nextY;
    let nextX = getNextX();
    let nextY = getNextY();
    if (willCollideWithWalls(nextX, nextY)) {
      return false;
    }
    if ((x = nextX) & (y = nextY)) {
      return false;
    }
    let x = nextX;
    let y = nextY;
    return true;
  }

  method void captureDots() {
    do dots.setCaptured(x, y, x+size, y+size);
    return;
  }

  method void draw() {
    do Screen.setColor(false);
    if (dir = 4) {
      do Screen.drawRectangle(x-1, y, x-1, y+size);
    }
    if (dir = 3) {
      do Screen.drawRectangle(x+size+1, y, x+size+1, y+size);
    }
    if (dir = 2) {
      do Screen.drawRectangle(x, y-1, x+size, y-1);
    }
    if (dir = 1) {
      do Screen.drawRectangle(x, y+size+1, x+size, y+size+1);
    }
    // Don't redraw entire pbject
    do Screen.setColor(true);
    do Screen.drawRectangle(x, y, x+size, y+size);
    return;
  }

  method boolean willCollideWithWalls(int nextX, int nextY) {
    return walls.isOverlap(nextX, nextY, nextX+size, nextY+size);
  }

  method int getNextX() {
    var int nextX;
    let nextX = x;
    if (dir = 4) {
      let nextX = x + speed;
    }
    if (dir = 3) {
      let nextX = x - speed;
    }
    return nextX;
  }

  method int getNextY() {
    var int nextY;
    let nextY = y;
    if (dir = 2) {
      let nextY = y + speed;
    }
    if (dir = 1) {
      let nextY = y - speed;
    }
    return nextY;
  }

  method void reset() {
    let x = 248;
    let y = 120;
    let dir = 4;
    return;
  }

  method void setDir(int newDir) {
    let dir = newDir; // assume valid dir
    return;
  }

  /** Disposes this PacMan. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}