class Dots {
  field Array dots;
  field int nDots;
  field int perRow;
  field int rows;
  field int nCaptured;

  constructor Dots new() {
    let perRow = 15;
    let rows = 3;
    let nDots = perRow * rows;
    let dots = Array.new(nDots);
    do createDots();
    return this;
  }

  method void createDots() {
    var int x, y;
    var int offsetX, offsetY;
    var int i;
    var int row, col;
    let offsetX = 4;
    let offsetY = 16;
    let i = 0;

    while (i < nDots) {
      // TODO: create with formula
      let row = i / perRow;
      let col = i - (row * perRow);
      let x = offsetX + (8*col) + (24 * (col+1));
      let y = offsetY + (8*row) + (53 * (row+1));
      let dots[i] = Dot.new(x, y);
      let i = i + 1;
    }
    return;
  }

  method void next() {
    do draw();
    return;
  }

  method void draw() {
    var int i;
    var Dot cur;
    let i = 0;
    while (i < nDots) {
      let cur = dots[i];
      do cur.draw();
      let i = i + 1;
    }
    return;
  }

  method int getNCaptured() {
    return nCaptured;
  }

  method void setCaptured(PacMan pacman) {
    var int i;
    var Dot cur;
    let i = 0;
    while (i < nDots) {
      let cur = dots[i];
      if (pacman.isOnDot(cur) & ~(cur.getIsCaptured())) {
        do cur.setCaptured();
        let nCaptured = nCaptured + 1;
      }
      let i = i + 1;
    }
    return;
  }

  /** Disposes this Dots. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}