class Dots {
  field Array dots;
  field int nDots;
  field int nCaptured;

  constructor Dots new() {
    let nDots = 32;
    let dots = Array.new(nDots);
    do createDots();
    return this;
  }

  method void createDots() {
    var int startX, startY;
    var int i, j, cols;
    let startX = 16;
    let startY = 32;
    let i = 0;
    let cols = 8;

    while (i < nDots) {
      let j = i - ((i/cols)*cols);
      let dots[i] = Dot.new(startX+(64*j), startY+(32*(i/cols)));
      let i = i + 1;
    }
    return;
  }

  method void next() {
    do draw();
    return;
  }

  method void draw() {
    var int i;
    var Dot cur;
    let i = 0;
    while (i < nDots) {
      let cur = dots[i];
      do cur.draw();
      let i = i + 1;
    }
    return;
  }

  method int getNCaptured() {
    return nCaptured;
  }

  method void setCaptured(PacMan pacman) {
    var int i;
    var Dot cur;
    let i = 0;
    while (i < nDots) {
      let cur = dots[i];
      if (pacman.isOnDot(cur) & ~(cur.getIsCaptured())) {
        do cur.setCaptured();
        let nCaptured = nCaptured + 1;
      }
      let i = i + 1;
    }
    return;
  }

  /** Disposes this Dots. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}