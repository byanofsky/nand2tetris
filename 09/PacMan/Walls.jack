class Walls {
  field int nBoundaries;
  field Array boundaries;

  constructor Walls new() {
    let nBoundaries = 10;
    do createBoundaries();
    return this;
  }

  method void init() {
    do draw();
    return;
  }

  method void createBoundaries() {
    var int i, bx;
    let boundaries = Array.new(nBoundaries);

    let boundaries[0] = Boundary.new(0, 12, 511, 13); // top
    let boundaries[1] = Boundary.new(0, 12, 1, 255); // left
    let boundaries[2] = Boundary.new(0, 254, 511, 255); // bottom
    let boundaries[3] = Boundary.new(510, 12, 511, 255); // right

    let i = 4;
    while (i < nBoundaries) {
      let bx = (100*(i-4)) + (2*(i-4));
      let boundaries[i] = Boundary.new(bx, 12, bx+1, 255);
      let i = i + 1;
    }
    return;
  }

  method void draw() {
    var Boundary b;
    var int i;
    let i = 0;
    while (i < nBoundaries) {
      let b = boundaries[i];
      do b.draw();
      let i = i + 1;
    }
    return;
  }

  method boolean isOverlap(int x1, int y1, int x2, int y2) {
    var Boundary b;
    var int i;
    let i = 0;
    while (i < nBoundaries) {
      let b = boundaries[i];
      if (b.isOverlap(x1, y1, x2, y2)) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  /** Disposes this Walls. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}